% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fqpca.R
\name{fqpca}
\alias{fqpca}
\title{FQPCA (Functional Quantile Principal Component Analysis)}
\usage{
fqpca(
  data,
  colname = NULL,
  npc = 2,
  quantile.value = 0.5,
  periodic = TRUE,
  splines.df = 10,
  splines.method = "conquer",
  penalized = FALSE,
  lambda.ridge = 0,
  tol = 0.001,
  max.iters = 20,
  verbose = FALSE,
  seed = NULL,
  parallelized.scores = FALSE,
  num.cores = NULL
)
}
\arguments{
\item{data}{An \eqn{(N \times T)} matrix, a tf object from the tidyfun package or a data.frame containing the functional data as a tf column.}

\item{colname}{The name of the column containing the functional data. Use only if data is a dataframe and colname is a column in the dataframe.}

\item{npc}{The number of estimated components.}

\item{quantile.value}{The quantile considered.}

\item{periodic}{Boolean indicating if the data is expected to be periodic (start coincides with end) or not.}

\item{splines.df}{Degrees of freedom for the splines.}

\item{splines.method}{Method used in the resolution of the splines quantile regression model. It currently accepts the methods \code{c('conquer', 'quantreg')}.}

\item{penalized}{Boolean indicating if the smoothness should be controlled using a second derivative penalty. This functionality is experimental.}

\item{lambda.ridge}{Hyper parameter controlling the penalization on the second derivative of the splines. It has effect only with \code{penalized=TRUE} and \code{method='conquer'}.}

\item{tol}{Tolerance on the convergence of the algorithm.}

\item{max.iters}{Maximum number of iterations.}

\item{verbose}{Boolean indicating the verbosity.}

\item{seed}{Seed for the random generator number.}

\item{parallelized.scores}{Should the scores be computed in parallel? Experimental component.}

\item{num.cores}{Number of cores to use in parallelized executions.}
}
\value{
fqpca_object
}
\description{
Solves the functional quantile principal component analysis methodology
}
\examples{

n.obs = 150
n.time = 144

# Generate scores
c1.vals = rnorm(n.obs)
c2.vals = rnorm(n.obs)

# Generate pc's
pc1 = sin(seq(0, 2*pi, length.out = n.time))
pc2 = cos(seq(0, 2*pi, length.out = n.time))

# Generate data
Y <- c1.vals * matrix(pc1, nrow = n.obs, ncol=n.time, byrow = TRUE) +
c2.vals * matrix(pc2, nrow = n.obs, ncol=n.time, byrow = TRUE)

# Add noise
Y <- Y + matrix(rnorm(n.obs * n.time, 0, 0.4), nrow = n.obs)

# Add missing observations
Y[sample(n.obs*n.time, as.integer(0.2*n.obs*n.time))] <- NA

results <- fqpca(data = Y, npc = 2, quantile.value = 0.5, seed=1)

intercept <- results$intercept
loadings <- results$loadings
scores <- results$scores
}
